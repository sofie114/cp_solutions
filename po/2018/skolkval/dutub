#include <bits/stdc++.h>
using namespace std;

#define umap unordered_map
#define vo vector
#define pb push_back
#define ar array
#define len(x) x.size()
typedef long long ll;

#define rep(i, a, b) for(ll i=(a); i<b; i++)
#define pr2(x) cerr << #x << "=" << x << endl
//what i dont use for no-google contests
#define all(v) v.begin(), v.end()
#define repd(i, a, b) for(ll i=(b-1); i >= a; i--)
#define pr1(x) {cerr << x << " ";} cerr << endl;
#define repv(item, arr) for (auto &item: arr)
#define prar(n, arr) rep(i, 0, n){cerr << arr[i] << " ";} cerr << endl;
#define pr(...) {cerr << #__VA_ARGS__ << "="; print_vars(__VA_ARGS__);}
template<typename T>
void print_vars(T arg) {
    cerr << arg << endl;
}

template<typename T, typename... Args>
void print_vars(T arg, Args... args) {
    cerr << arg << ", ";
    print_vars(args...);
}
//go for outline with ;, then details
//en dp som kollar vilka av a-j är aktiva och uppdaterar detta optimalt. 

int const mxn = 36;
ll n, tim[mxn];
string ktg[mxn];
set<char> letters;
umap<char, int> let_ind = {{'a', 0}, {'b', 1}, {'c', 2}, {'d', 3}, {'e', 4}, {'f', 5}, {'g', 6}, {'h', 7}, {'i', 8}, {'j', 9}};
umap<string, ll> bins;
string ans = "0000000000";

void findbins(int i, string bin){
    if(i==10) {bins[bin] = 1e9; return;}
    findbins(i+1, bin);
    bin[i] = '1';
    findbins(i+1, bin);
}

int main(){
    findbins(0, "0000000000");

    cin >> n; 
    rep(i, 0, n) {
        string tmp;
        cin >> tim[i] >> tmp;
        ktg[i] = "0000000000";

        for(auto let: tmp){
            letters.insert(let);
            ktg[i][let_ind[let]] = '1';
            ans[let_ind[let]] = '1';
        }
        bins[ktg[i]] = min(bins[ktg[i]], tim[i]);
    }



    rep(i, 0, n){
        for(auto s: bins){
            string news = "0000000000";
            rep(u, 0, 10){
                if(s.first[u] == '1' || ktg[i][u] == '1'){
                    news[u] = '1';
                } 
                //jämför tid
                if(bins[news] > tim[i]+s.second){
                    bins[news] = tim[i]+s.second;
                }
            }
            
        }
    }

    cout << bins[ans];
}
