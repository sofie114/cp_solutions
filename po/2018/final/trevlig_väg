#include <bits/stdc++.h>
using namespace std;

#define umap unordered_map
#define vo vector
#define pb push_back
#define ar array
#define len(x) x.size()
typedef long long ll;

#define rep(i, a, b) for(ll i=(a); i<b; i++)
#define pr2(x) cerr << #x << "=" << x << endl
//what i dont use for no-google contests
#define all(v) v.begin(), v.end()
#define repd(i, a, b) for(ll i=(b-1); i >= a; i--)
#define pr1(x) {cerr << x << " ";} cerr << endl;
#define repv(item, arr) for (auto &item: arr)
#define prar(n, arr) rep(i, 0, n){cerr << arr[i] << " ";} cerr << endl;
#define pr(...) {cerr << #__VA_ARGS__ << "="; print_vars(__VA_ARGS__);}
template<typename T>
void print_vars(T arg) {
    cerr << arg << endl;
}

template<typename T, typename... Args>
void print_vars(T arg, Args... args) {
    cerr << arg << ", ";
    print_vars(args...);
}
//go for outline with ;, then details
int const mxn = 1e5+10;
int n, m;
vo<ar<int, 2>> adj[mxn];
umap<int, double> vis;

double dfs(int at, double mid){
    if(at==n-1) return 0; 
    if(len(adj[at]) == 0) return -1e18; 

    if(vis.count(at)) return vis[at];

    double mx = -1e18;
    for(auto x: adj[at]){
        double val = dfs(x[0], mid);
        if(val != -1e18) {mx = max(mx, val+double(x[1])-mid); }
        // if(mid == 750004) pr(val, mx, val+x[1]-mid, at, x[0]);
    }
    
    vis[at] = mx;
    return mx;
}   

int main(){
    cin >> n >> m;
    rep(i, 0, m){
        int a, b, c;
        cin >> a >> b >> c; a--, --b;
        adj[a].pb({b, c});
    }


    double lo=0, hi=2*1e6+10;
    while(hi-lo>0.00000001){
        vis.clear();
        double mid = (lo+hi)/2;
        if(dfs(0, mid) >= 0) lo = mid;
        else hi = mid;
        // pr(lo, hi, mid);
    }

    cout << fixed << setprecision(7) << lo;
}
